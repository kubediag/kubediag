apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: diagnosers.diagnosis.netease.com
spec:
  group: diagnosis.netease.com
  names:
    kind: Diagnoser
    listKind: DiagnoserList
    plural: diagnosers
    singular: diagnoser
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Diagnoser is the Schema for the diagnosers API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: DiagnoserSpec defines the desired state of Diagnoser.
          properties:
            externalIP:
              description: ExternalIP is the external serving ip of the diagnoser.
              type: string
            externalPort:
              description: ExternalPort is the external serving port of the diagnoser.
              format: int32
              type: integer
            path:
              description: Path is the serving http path of diagnoser.
              type: string
            scheme:
              description: Scheme is the serving scheme of diagnoser.
              type: string
            timeoutSeconds:
              description: Number of seconds after which the diagnoser times out. Defaults to 30 seconds. Minimum value is 1.
              format: int32
              type: integer
          type: object
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: diagnoses.diagnosis.netease.com
spec:
  group: diagnosis.netease.com
  names:
    kind: Diagnosis
    listKind: DiagnosisList
    plural: diagnoses
    singular: diagnosis
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Diagnosis is the Schema for the diagnoses API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: DiagnosisSpec defines the desired state of Diagnosis.
          properties:
            assignedDiagnosers:
              description: AssignedDiagnosers is the list of diagnosers to execute diagnosing logics. Diagnosers would be executed in the specified sequence. Only assigned diagnosers will be executed.
              items:
                description: NamespacedName represents a kubernetes api resource.
                properties:
                  name:
                    description: Name specifies the name of a kubernetes api resource.
                    type: string
                  namespace:
                    description: Namespace specifies the namespace of a kubernetes api resource.
                    type: string
                required:
                - name
                - namespace
                type: object
              type: array
            assignedInformationCollectors:
              description: AssignedInformationCollectors is the list of information collectors to execute information collecting logics. Information collectors would be executed in the specified sequence. Only assigned information collectors will be executed.
              items:
                description: NamespacedName represents a kubernetes api resource.
                properties:
                  name:
                    description: Name specifies the name of a kubernetes api resource.
                    type: string
                  namespace:
                    description: Namespace specifies the namespace of a kubernetes api resource.
                    type: string
                required:
                - name
                - namespace
                type: object
              type: array
            assignedRecoverers:
              description: AssignedRecoverers is the list of recoverers to execute recovering logics. Recoverers would be executed in the specified sequence. Only assigned recoverers will be executed.
              items:
                description: NamespacedName represents a kubernetes api resource.
                properties:
                  name:
                    description: Name specifies the name of a kubernetes api resource.
                    type: string
                  namespace:
                    description: Namespace specifies the namespace of a kubernetes api resource.
                    type: string
                required:
                - name
                - namespace
                type: object
              type: array
            commandExecutors:
              description: CommandExecutors is the list of commands to execute during information collecting, diagnosing and recovering.
              items:
                description: CommandExecutorSpec describes how to execute a command with the given arguments. A CommandExecutor could be an information collector, a diagnoser or a recoverer.
                properties:
                  command:
                    description: Command represents a command being prepared and run.
                    items:
                      type: string
                    type: array
                  timeoutSeconds:
                    description: Number of seconds after which the command times out. Defaults to 30 seconds. Minimum value is 1.
                    format: int32
                    type: integer
                  type:
                    description: "Type is the type of the command executor. There are three possible type values: \n InformationCollector: The command executor will be run by information manager. Diagnoser: The command executor will be run by diagnoser chain. Recoverer: The command executor will be run by recoverer chain."
                    type: string
                required:
                - command
                - type
                type: object
              type: array
            context:
              description: Context is a blob of information about the diagnosis, meant to be user-facing content and display instructions. This field may contain customized values for custom source.
              type: object
            kubernetesEvent:
              description: KubernetesEvent contains the kubernetes event about the diagnosis from kubernetes event source. This must be specified if diagnosis source is KubernetesEvent.
              properties:
                action:
                  description: What action was taken/failed regarding to the Regarding object.
                  type: string
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                count:
                  description: The number of times this event has occurred.
                  format: int32
                  type: integer
                eventTime:
                  description: Time when this Event was first observed.
                  format: date-time
                  type: string
                firstTimestamp:
                  description: The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
                  format: date-time
                  type: string
                involvedObject:
                  description: The object that this event is about.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                kind:
                  description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                lastTimestamp:
                  description: The time at which the most recent occurrence of this event was recorded.
                  format: date-time
                  type: string
                message:
                  description: 'A human-readable description of the status of this operation. TODO: decide on maximum length.'
                  type: string
                metadata:
                  description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                  type: object
                reason:
                  description: 'This should be a short, machine understandable string that gives the reason for the transition into the object''s current status. TODO: provide exact specification for format.'
                  type: string
                related:
                  description: Optional secondary object for more complex actions.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                reportingComponent:
                  description: Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
                  type: string
                reportingInstance:
                  description: ID of the controller instance, e.g. `kubelet-xyzf`.
                  type: string
                series:
                  description: Data about the Event series this event represents or nil if it's a singleton Event.
                  properties:
                    count:
                      description: Number of occurrences in this series up to the last heartbeat time
                      format: int32
                      type: integer
                    lastObservedTime:
                      description: Time of the last occurrence observed
                      format: date-time
                      type: string
                    state:
                      description: 'State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18'
                      type: string
                  type: object
                source:
                  description: The component reporting this event. Should be a short machine understandable string.
                  properties:
                    component:
                      description: Component from which the event is generated.
                      type: string
                    host:
                      description: Node name on which the event is generated.
                      type: string
                  type: object
                type:
                  description: Type of this event (Normal, Warning), new types could be added in the future
                  type: string
              required:
              - involvedObject
              - metadata
              type: object
            nodeName:
              description: One of NodeName and PodReference must be specified. NodeName is a specific node which the diagnosis is on.
              type: string
            podReference:
              description: PodReference contains details of the target pod.
              properties:
                containerName:
                  description: ContainerName specifies name of the target container.
                  type: string
                name:
                  description: Name specifies the name of a pod.
                  type: string
                namespace:
                  description: Namespace specifies the namespace of a pod.
                  type: string
              required:
              - name
              - namespace
              type: object
            profilers:
              description: Profilers is the list of profiler desired behaviors to be performed during information collecting, diagnosing and recovering.
              items:
                description: ProfilerSpec describes desired behavior of a profiler to be performed against a program to determine its performance status.
                properties:
                  expirationSeconds:
                    description: Number of seconds after which the profiler endpoint expires. Defaults to 7200 seconds. Minimum value is 1.
                    format: int32
                    type: integer
                  go:
                    description: One and only one of the following programming languages should be specified. Go specifies the action to perform for profiling a go program.
                    properties:
                      source:
                        description: Source specifies the profile source. It must be a local file path or a URL.
                        type: string
                      tls:
                        description: TLS specifies the secret reference for source
                        properties:
                          secretReference:
                            description: secretReference specifies the secret in cluster which hold token and ca.crt to access GoProfilerSpec.Source
                            properties:
                              name:
                                description: Name specifies the name of a kubernetes api resource.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of a kubernetes api resource.
                                type: string
                            required:
                            - name
                            - namespace
                            type: object
                        type: object
                      type:
                        description: 'Heap: The profiler will be run by heap Profile: The profiler will be run by cpu profile Goroutine: The profiler will be run by goroutine'
                        type: string
                    required:
                    - source
                    - type
                    type: object
                  java:
                    description: Java specifies the action to perform for profiling a java program.
                    properties:
                      hprofFilePath:
                        description: HPROFFilePath is the path of hprof file. It must be an absolute path on node.
                        type: string
                      type:
                        description: "Type is the type of the java profiler. There are two possible type values: \n Arthas: The profiler will be run by arthas. MemoryAnalyzer: The profiler will be run by eclipse memory analyzer."
                        type: string
                    required:
                    - type
                    type: object
                  name:
                    description: Name specifies the name of a profiler.
                    type: string
                  timeoutSeconds:
                    description: Number of seconds after which the profiler times out. Defaults to 30 seconds. Minimum value is 1.
                    format: int32
                    type: integer
                  type:
                    description: "Type is the type of the profiler. There are three possible type values: \n InformationCollector: The profiler will be run by information manager. Diagnoser: The profiler will be run by diagnoser chain. Recoverer: The profiler will be run by recoverer chain."
                    type: string
                required:
                - name
                - type
                type: object
              type: array
            prometheusAlert:
              description: PrometheusAlert contains the prometheus alert about the diagnosis from prometheus alert source. This must be specified if diagnosis source is PrometheusAlert.
              properties:
                annotations:
                  additionalProperties:
                    description: A LabelValue is an associated value for a LabelName.
                    type: string
                  description: Annotations contains extra key value information which does not define alert identity.
                  type: object
                endsAt:
                  description: EndsAt specifies the known end time for this alert.
                  format: date-time
                  type: string
                generatorURL:
                  description: GeneratorURL specifies the url of alert generator.
                  type: string
                labels:
                  additionalProperties:
                    description: A LabelValue is an associated value for a LabelName.
                    type: string
                  description: Labels contains label value pairs for purpose of aggregation, matching, and disposition dispatching. This must minimally include an "alertname" label.
                  type: object
                startsAt:
                  description: StartsAt specifies the known start time for this alert.
                  format: date-time
                  type: string
              required:
              - annotations
              - generatorURL
              - labels
              type: object
            source:
              description: Source is the diagnosis source. Valid sources are PrometheusAlert, KubernetesEvent and Custom.
              type: string
          required:
          - source
          type: object
        status:
          description: DiagnosisStatus defines the observed state of Diagnosis.
          properties:
            commandExecutors:
              description: CommandExecutors is the list of command execution results.
              items:
                description: CommandExecutorStatus is the command execution result.
                properties:
                  command:
                    description: Command represents a command being prepared and run.
                    items:
                      type: string
                    type: array
                  error:
                    description: Error is the command execution error.
                    type: string
                  stderr:
                    description: Stderr is standard error of the command.
                    type: string
                  stdout:
                    description: Stdout is standard output of the command.
                    type: string
                  type:
                    description: "Type is the type of the command executor. There are three possible type values: \n InformationCollector: The command executor will be run by information manager. Diagnoser: The command executor will be run by diagnoser chain. Recoverer: The command executor will be run by recoverer chain."
                    type: string
                required:
                - command
                - type
                type: object
              type: array
            conditions:
              description: Conditions contains current service state of diagnosis.
              items:
                description: DiagnosisCondition contains details for the current condition of this diagnosis.
                properties:
                  lastTransitionTime:
                    description: LastTransitionTime specifies last time the condition transitioned from one status to another.
                    format: date-time
                    type: string
                  message:
                    description: Message is a human readable message indicating details about last transition.
                    type: string
                  reason:
                    description: Reason is a unique, one-word, CamelCase reason for the condition's last transition.
                    type: string
                  status:
                    description: Status is the status of the condition. Can be True, False, Unknown.
                    type: string
                  type:
                    description: Type is the type of the condition.
                    type: string
                required:
                - status
                - type
                type: object
              type: array
            context:
              description: Context is a blob of information about the diagnosis, meant to be user-facing content and display instructions. This field may contain customized values for custom source.
              type: object
            diagnoser:
              description: Diagnoser indicates the diagnoser which has identified the diagnosis successfully.
              properties:
                name:
                  description: Name specifies the name of a kubernetes api resource.
                  type: string
                namespace:
                  description: Namespace specifies the namespace of a kubernetes api resource.
                  type: string
              required:
              - name
              - namespace
              type: object
            identifiable:
              description: Identifiable indicates if the diagnosis could be identified by the diagnoser chain.
              type: boolean
            message:
              description: Message is a human readable message indicating details about why the diagnosis is in this condition.
              type: string
            phase:
              description: "Phase is a simple, high-level summary of where the diagnosis is in its lifecycle. The conditions array, the reason and message fields contain more detail about the pod's status. There are six possible phase values: \n InformationCollecting: The diagnosis has been passed to information manager and some of the information collectors have been started. At least one information collector is still running. Diagnosing: The diagnosis has been passed to diagnoser chain and some of the diagnosers have been started. At least one diagnoser is still running. Recovering: The diagnosis has been passed to recoverer chain and some of the recoverers have been started. At least one recoverer is still running. Succeeded: The diagnosis has been successfully recovered by some of the recoverers. Failed: All diagnosers and recoverers have been executed, and none of diagnosers and recoverers is able to diagnose and recover the diagnosis. Unknown: For some reason the state of the diagnosis could not be obtained."
              type: string
            profilers:
              description: Profilers is the list of profiler status.
              items:
                description: ProfilerStatus is the profiler status.
                properties:
                  endpoint:
                    description: Endpoint specifies how to navigate through a profile. It will be set as expired after expiration seconds.
                    type: string
                  error:
                    description: Error is the profiler error.
                    type: string
                  name:
                    description: Name specifies the name of a profiler.
                    type: string
                  type:
                    description: "Type is the type of the profiler. There are three possible type values: \n InformationCollector: The profiler will be run by information manager. Diagnoser: The profiler will be run by diagnoser chain. Recoverer: The profiler will be run by recoverer chain."
                    type: string
                required:
                - endpoint
                - name
                - type
                type: object
              type: array
            reason:
              description: Reason is a brief CamelCase message indicating details about why the diagnosis is in this state.
              type: string
            recoverable:
              description: Recoverable indicates if the diagnosis could be recovered by the recoverer chain.
              type: boolean
            recoverer:
              description: Recoverer indicates the recoverer which has recovered the diagnosis successfully.
              properties:
                name:
                  description: Name specifies the name of a kubernetes api resource.
                  type: string
                namespace:
                  description: Namespace specifies the namespace of a kubernetes api resource.
                  type: string
              required:
              - name
              - namespace
              type: object
            startTime:
              description: StartTime is RFC 3339 date and time at which the object was acknowledged by the system.
              format: date-time
              type: string
          required:
          - identifiable
          - recoverable
          type: object
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: diagnosissources.diagnosis.netease.com
spec:
  group: diagnosis.netease.com
  names:
    kind: DiagnosisSource
    listKind: DiagnosisSourceList
    plural: diagnosissources
    singular: diagnosissource
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: DiagnosisSource is the Schema for the diagnosissources API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: DiagnosisSourceSpec defines the desired state of DiagnosisSource.
          properties:
            assignedDiagnosers:
              description: AssignedDiagnosers is the list of diagnosers to execute diagnosing logics. Diagnoses generated by the source contains predefined diagnosers.
              items:
                description: NamespacedName represents a kubernetes api resource.
                properties:
                  name:
                    description: Name specifies the name of a kubernetes api resource.
                    type: string
                  namespace:
                    description: Namespace specifies the namespace of a kubernetes api resource.
                    type: string
                required:
                - name
                - namespace
                type: object
              type: array
            assignedInformationCollectors:
              description: AssignedInformationCollectors is the list of information collectors to execute information collecting logics. Diagnoses generated by the source contains predefined information collectors.
              items:
                description: NamespacedName represents a kubernetes api resource.
                properties:
                  name:
                    description: Name specifies the name of a kubernetes api resource.
                    type: string
                  namespace:
                    description: Namespace specifies the namespace of a kubernetes api resource.
                    type: string
                required:
                - name
                - namespace
                type: object
              type: array
            assignedRecoverers:
              description: AssignedRecoverers is the list of recoverers to execute recovering logics. Diagnoses generated by the source contains predefined recoverers.
              items:
                description: NamespacedName represents a kubernetes api resource.
                properties:
                  name:
                    description: Name specifies the name of a kubernetes api resource.
                    type: string
                  namespace:
                    description: Namespace specifies the namespace of a kubernetes api resource.
                    type: string
                required:
                - name
                - namespace
                type: object
              type: array
            commandExecutors:
              description: CommandExecutors is the list of commands to execute during information collecting, diagnosing and recovering. Diagnoses generated by the source contains predefined command executors.
              items:
                description: CommandExecutorSpec describes how to execute a command with the given arguments. A CommandExecutor could be an information collector, a diagnoser or a recoverer.
                properties:
                  command:
                    description: Command represents a command being prepared and run.
                    items:
                      type: string
                    type: array
                  timeoutSeconds:
                    description: Number of seconds after which the command times out. Defaults to 30 seconds. Minimum value is 1.
                    format: int32
                    type: integer
                  type:
                    description: "Type is the type of the command executor. There are three possible type values: \n InformationCollector: The command executor will be run by information manager. Diagnoser: The command executor will be run by diagnoser chain. Recoverer: The command executor will be run by recoverer chain."
                    type: string
                required:
                - command
                - type
                type: object
              type: array
            context:
              description: Context is a blob of information about the diagnosis, meant to be user-facing content and display instructions. Diagnoses generated by the source contains predefined context.
              type: object
            profilers:
              description: Profilers is the list of profiler desired behaviors to be performed during information collecting, diagnosing and recovering.
              items:
                description: ProfilerSpec describes desired behavior of a profiler to be performed against a program to determine its performance status.
                properties:
                  expirationSeconds:
                    description: Number of seconds after which the profiler endpoint expires. Defaults to 7200 seconds. Minimum value is 1.
                    format: int32
                    type: integer
                  go:
                    description: One and only one of the following programming languages should be specified. Go specifies the action to perform for profiling a go program.
                    properties:
                      source:
                        description: Source specifies the profile source. It must be a local file path or a URL.
                        type: string
                      tls:
                        description: TLS specifies the secret reference for source
                        properties:
                          secretReference:
                            description: secretReference specifies the secret in cluster which hold token and ca.crt to access GoProfilerSpec.Source
                            properties:
                              name:
                                description: Name specifies the name of a kubernetes api resource.
                                type: string
                              namespace:
                                description: Namespace specifies the namespace of a kubernetes api resource.
                                type: string
                            required:
                            - name
                            - namespace
                            type: object
                        type: object
                      type:
                        description: 'Heap: The profiler will be run by heap Profile: The profiler will be run by cpu profile Goroutine: The profiler will be run by goroutine'
                        type: string
                    required:
                    - source
                    - type
                    type: object
                  java:
                    description: Java specifies the action to perform for profiling a java program.
                    properties:
                      hprofFilePath:
                        description: HPROFFilePath is the path of hprof file. It must be an absolute path on node.
                        type: string
                      type:
                        description: "Type is the type of the java profiler. There are two possible type values: \n Arthas: The profiler will be run by arthas. MemoryAnalyzer: The profiler will be run by eclipse memory analyzer."
                        type: string
                    required:
                    - type
                    type: object
                  name:
                    description: Name specifies the name of a profiler.
                    type: string
                  timeoutSeconds:
                    description: Number of seconds after which the profiler times out. Defaults to 30 seconds. Minimum value is 1.
                    format: int32
                    type: integer
                  type:
                    description: "Type is the type of the profiler. There are three possible type values: \n InformationCollector: The profiler will be run by information manager. Diagnoser: The profiler will be run by diagnoser chain. Recoverer: The profiler will be run by recoverer chain."
                    type: string
                required:
                - name
                - type
                type: object
              type: array
            sourceTemplate:
              description: SourceTemplate is the template of diagnosis source. An diagnosis source generates diagnosis according to the template.
              properties:
                kubernetesEventTemplate:
                  description: KubernetesEventTemplate specifies the template to create an diagnosis from a kubernetes event.
                  properties:
                    regexp:
                      description: Regexp is the regular expression for matching kubernetes event template.
                      properties:
                        action:
                          description: Action is the regular expression for matching "Action" of kubernetes event.
                          type: string
                        count:
                          description: Count is the regular expression for matching "Count" of kubernetes event.
                          type: string
                        firstTimestamp:
                          description: FirstTimestamp is the regular expression for matching "FirstTimestamp" of kubernetes event.
                          type: string
                        involvedObject:
                          description: InvolvedObject is the regular expression for matching "InvolvedObject" of kubernetes event. All fields of "InvolvedObject" are regular expressions.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        lastTimestamp:
                          description: LastTimestamp is the regular expression for matching "LastTimestamp" of kubernetes event.
                          type: string
                        message:
                          description: Message is the regular expression for matching "Message" of kubernetes event.
                          type: string
                        name:
                          description: Name is the regular expression for matching "Name" of kubernetes event.
                          type: string
                        namespace:
                          description: Namespace is the regular expression for matching "Namespace" of kubernetes event.
                          type: string
                        reason:
                          description: Reason is the regular expression for matching "Reason" of kubernetes event.
                          type: string
                        reportingController:
                          description: ReportingController is the regular expression for matching "ReportingController" of kubernetes event.
                          type: string
                        reportingInstance:
                          description: ReportingInstance is the regular expression for matching "ReportingInstance" of kubernetes event.
                          type: string
                        source:
                          description: Source is the regular expression for matching "Source" of kubernetes event. All fields of "Source" are regular expressions.
                          properties:
                            component:
                              description: Component from which the event is generated.
                              type: string
                            host:
                              description: Node name on which the event is generated.
                              type: string
                          type: object
                        type:
                          description: Type is the regular expression for matching "Type" of kubernetes event.
                          type: string
                      type: object
                  required:
                  - regexp
                  type: object
                prometheusAlertTemplate:
                  description: One and only one of the following source should be specified. PrometheusAlertTemplate specifies the template to create an diagnosis from a prometheus alert.
                  properties:
                    nodeNameReferenceLabel:
                      description: NodeNameReferenceLabel specifies the label for setting NodeName of generated diagnosis.
                      type: string
                    regexp:
                      description: Regexp is the regular expression for matching prometheus alert template.
                      properties:
                        alertName:
                          description: AlertName is the regular expression for matching "AlertName" of prometheus alert.
                          type: string
                        annotations:
                          additionalProperties:
                            description: A LabelValue is an associated value for a LabelName.
                            type: string
                          description: Annotations is the regular expression for matching "Annotations" of prometheus alert. Only annotation values are regular expressions while all annotation names must be identical to the prometheus alert annotation names.
                          type: object
                        endsAt:
                          description: EndsAt is the regular expression for matching "EndsAt" of prometheus alert.
                          type: string
                        generatorURL:
                          description: GeneratorURL is the regular expression for matching "GeneratorURL" of prometheus alert.
                          type: string
                        labels:
                          additionalProperties:
                            description: A LabelValue is an associated value for a LabelName.
                            type: string
                          description: Labels is the regular expression for matching "Labels" of prometheus alert. Only label values are regular expressions while all label names must be identical to the prometheus alert label names.
                          type: object
                        startsAt:
                          description: StartsAt is the regular expression for matching "StartsAt" of prometheus alert.
                          type: string
                      type: object
                  required:
                  - nodeNameReferenceLabel
                  - regexp
                  type: object
                type:
                  description: "Type is the type of the source template. There are two possible type values: \n PrometheusAlert: The diagnosis is generated from a prometheus alert. KubernetesEvent: The diagnosis is generated from a kubernetes event."
                  type: string
              required:
              - type
              type: object
          required:
          - sourceTemplate
          type: object
        status:
          description: DiagnosisSourceStatus defines the observed state of DiagnosisSource.
          properties:
            lastDiagnosis:
              description: LastDiagnosis contains details about last diagnosis generated by the source.
              type: object
          type: object
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: informationcollectors.diagnosis.netease.com
spec:
  group: diagnosis.netease.com
  names:
    kind: InformationCollector
    listKind: InformationCollectorList
    plural: informationcollectors
    singular: informationcollector
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: InformationCollector is the Schema for the informationcollectors API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: InformationCollectorSpec defines the desired state of InformationCollector.
          properties:
            externalIP:
              description: ExternalIP is the external serving ip of the information collector.
              type: string
            externalPort:
              description: ExternalPort is the external serving port of the information collector.
              format: int32
              type: integer
            path:
              description: Path is the serving http path of information collector.
              type: string
            scheme:
              description: Scheme is the serving scheme of information collector.
              type: string
            timeoutSeconds:
              description: Number of seconds after which the information collector times out. Defaults to 30 seconds. Minimum value is 1.
              format: int32
              type: integer
          type: object
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: recoverers.diagnosis.netease.com
spec:
  group: diagnosis.netease.com
  names:
    kind: Recoverer
    listKind: RecovererList
    plural: recoverers
    singular: recoverer
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Recoverer is the Schema for the recoverers API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: RecovererSpec defines the desired state of Recoverer.
          properties:
            externalIP:
              description: ExternalIP is the external serving ip of the recoverer.
              type: string
            externalPort:
              description: ExternalPort is the external serving port of the recoverer.
              format: int32
              type: integer
            path:
              description: Path is the serving http path of recoverer.
              type: string
            scheme:
              description: Scheme is the serving scheme of recoverer.
              type: string
            timeoutSeconds:
              description: Number of seconds after which the recoverer times out. Defaults to 30 seconds. Minimum value is 1.
              format: int32
              type: integer
          type: object
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: go-profiler-sa
  namespace: kube-diagnoser
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-diagnoser
  namespace: kube-diagnoser
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leader-election-role
  namespace: kube-diagnoser
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: go-profiler-role
rules:
- nonResourceURLs:
  - /debug/pprof/*
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: kube-diagnoser-role
rules:
- apiGroups:
  - apps
  resources:
  - daemonsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - diagnosis.netease.com
  resources:
  - diagnosers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - diagnosis.netease.com
  resources:
  - diagnosers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - diagnosis.netease.com
  resources:
  - diagnoses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - diagnosis.netease.com
  resources:
  - diagnoses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - diagnosis.netease.com
  resources:
  - diagnosissources
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - diagnosis.netease.com
  resources:
  - diagnosissources/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - diagnosis.netease.com
  resources:
  - informationcollectors
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - diagnosis.netease.com
  resources:
  - informationcollectors/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - diagnosis.netease.com
  resources:
  - recoverers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - diagnosis.netease.com
  resources:
  - recoverers/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leader-election-rolebinding
  namespace: kube-diagnoser
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
- kind: ServiceAccount
  name: kube-diagnoser
  namespace: kube-diagnoser
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: go-profiler-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: go-profiler-role
subjects:
- kind: ServiceAccount
  name: go-profiler-sa
  namespace: kube-diagnoser
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-diagnoser-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-diagnoser-role
subjects:
- kind: ServiceAccount
  name: kube-diagnoser
  namespace: kube-diagnoser
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: proxy-role
subjects:
- kind: ServiceAccount
  name: kube-diagnoser
  namespace: kube-diagnoser
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: kube-diagnoser
    mode: agent
  name: kube-diagnoser-agent-metrics-monitor
  namespace: kube-diagnoser
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 10355
    targetPort: metrics
  selector:
    control-plane: kube-diagnoser
    mode: agent
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: kube-diagnoser
    mode: agent
  name: kube-diagnoser-agent-metrics-service
  namespace: kube-diagnoser
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    control-plane: kube-diagnoser
    mode: agent
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: kube-diagnoser
    mode: master
  name: kube-diagnoser-master
  namespace: kube-diagnoser
spec:
  ports:
  - name: http
    port: 8089
    targetPort: http
  selector:
    control-plane: kube-diagnoser
    mode: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: kube-diagnoser
    mode: master
  name: kube-diagnoser-master-metrics-monitor
  namespace: kube-diagnoser
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 10357
    targetPort: metrics
  selector:
    control-plane: kube-diagnoser
    mode: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-service
  namespace: kube-diagnoser
spec:
  ports:
  - port: 443
    targetPort: 9443
  selector:
    control-plane: kube-diagnoser
    mode: master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: kube-diagnoser
    mode: master
  name: kube-diagnoser-master
  namespace: kube-diagnoser
spec:
  selector:
    matchLabels:
      control-plane: kube-diagnoser
      mode: master
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        control-plane: kube-diagnoser
        mode: master
    spec:
      containers:
      - args:
        - --mode=master
        - --bind-address=$(POD_IP)
        - --port=8089
        - --metrics-port=10357
        - --enable-leader-election=true
        command:
        - /kube-diagnoser
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: hub.c.163.com/combk8s/kube-diagnoser:v0.1.6
        name: kube-diagnoser
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 10357
          name: metrics
        - containerPort: 8089
          name: http
        resources:
          limits:
            cpu: 400m
            memory: 400Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/kube-diagnoser/serving-certs
          name: cert
          readOnly: true
      hostNetwork: true
      hostPID: true
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      serviceAccountName: kube-diagnoser
      terminationGracePeriodSeconds: 10
      tolerations:
      - operator: Exists
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    control-plane: kube-diagnoser
    mode: agent
  name: kube-diagnoser-agent
  namespace: kube-diagnoser
spec:
  selector:
    matchLabels:
      control-plane: kube-diagnoser
      mode: agent
  template:
    metadata:
      labels:
        control-plane: kube-diagnoser
        mode: agent
    spec:
      containers:
      - args:
        - --mode=agent
        - --bind-address=$(POD_IP)
        - --port=8090
        - --metrics-port=10355
        - --data-root=/var/lib/kube-diagnoser
        - --node-name=$(NODE_NAME)
        command:
        - /kube-diagnoser
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: hub.c.163.com/combk8s/kube-diagnoser:v0.1.6
        name: kube-diagnoser
        ports:
        - containerPort: 10355
          name: metrics
        - containerPort: 8090
          name: http
        resources:
          limits:
            cpu: 4
            memory: 4Gi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-sock
        - mountPath: /var/lib/docker
          name: docker-data
        - mountPath: /var/lib/kubelet
          name: kubelet-data
        - mountPath: /var/lib/kube-diagnoser
          name: kube-diagnoser-data
      hostNetwork: true
      hostPID: true
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      serviceAccountName: kube-diagnoser
      terminationGracePeriodSeconds: 10
      tolerations:
      - operator: Exists
      volumes:
      - hostPath:
          path: /var/run/docker.sock
          type: Socket
        name: docker-sock
      - hostPath:
          path: /var/lib/docker
          type: Directory
        name: docker-data
      - hostPath:
          path: /var/lib/kubelet
          type: Directory
        name: kubelet-data
      - hostPath:
          path: /var/lib/kube-diagnoser
          type: DirectoryOrCreate
        name: kube-diagnoser-data
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 5
    type: RollingUpdate
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: serving-cert
  namespace: kube-diagnoser
spec:
  dnsNames:
  - webhook-service.kube-diagnoser.svc
  - webhook-service.kube-diagnoser.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-issuer
  namespace: kube-diagnoser
spec:
  selfSigned: {}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    control-plane: kube-diagnoser
    mode: agent
  name: kube-diagnoser-agent-metrics-monitor
  namespace: kube-diagnoser
spec:
  endpoints:
  - path: /metrics
    port: metrics
  namespaceSelector:
    matchNames:
    - kube-diagnoser
  selector:
    matchLabels:
      control-plane: kube-diagnoser
      mode: agent
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    control-plane: kube-diagnoser
    mode: master
  name: kube-diagnoser-master-metrics-monitor
  namespace: kube-diagnoser
spec:
  endpoints:
  - path: /metrics
    port: metrics
  namespaceSelector:
    matchNames:
    - kube-diagnoser
  selector:
    matchLabels:
      control-plane: kube-diagnoser
      mode: master
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kube-diagnoser/serving-cert
  name: mutating-webhook-configuration
webhooks:
- clientConfig:
    caBundle: Cg==
    service:
      name: webhook-service
      namespace: kube-diagnoser
      path: /mutate-diagnosis-netease-com-v1-diagnoser
  failurePolicy: Fail
  name: mdiagnoser.kb.io
  rules:
  - apiGroups:
    - diagnosis.netease.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - diagnosers
- clientConfig:
    caBundle: Cg==
    service:
      name: webhook-service
      namespace: kube-diagnoser
      path: /mutate-diagnosis-netease-com-v1-diagnosis
  failurePolicy: Fail
  name: mdiagnosis.kb.io
  rules:
  - apiGroups:
    - diagnosis.netease.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - diagnoses
- clientConfig:
    caBundle: Cg==
    service:
      name: webhook-service
      namespace: kube-diagnoser
      path: /mutate-diagnosis-netease-com-v1-informationcollector
  failurePolicy: Fail
  name: minformationcollector.kb.io
  rules:
  - apiGroups:
    - diagnosis.netease.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - informationcollectors
- clientConfig:
    caBundle: Cg==
    service:
      name: webhook-service
      namespace: kube-diagnoser
      path: /mutate-diagnosis-netease-com-v1-recoverer
  failurePolicy: Fail
  name: mrecoverer.kb.io
  rules:
  - apiGroups:
    - diagnosis.netease.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - recoverers
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kube-diagnoser/serving-cert
  name: validating-webhook-configuration
webhooks:
- clientConfig:
    caBundle: Cg==
    service:
      name: webhook-service
      namespace: kube-diagnoser
      path: /validate-diagnosis-netease-com-v1-diagnoser
  failurePolicy: Fail
  name: vdiagnoser.kb.io
  rules:
  - apiGroups:
    - diagnosis.netease.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - diagnosers
- clientConfig:
    caBundle: Cg==
    service:
      name: webhook-service
      namespace: kube-diagnoser
      path: /validate-diagnosis-netease-com-v1-diagnosis
  failurePolicy: Fail
  name: vdiagnosis.kb.io
  rules:
  - apiGroups:
    - diagnosis.netease.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - diagnoses
- clientConfig:
    caBundle: Cg==
    service:
      name: webhook-service
      namespace: kube-diagnoser
      path: /validate-diagnosis-netease-com-v1-informationcollector
  failurePolicy: Fail
  name: vinformationcollector.kb.io
  rules:
  - apiGroups:
    - diagnosis.netease.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - informationcollectors
- clientConfig:
    caBundle: Cg==
    service:
      name: webhook-service
      namespace: kube-diagnoser
      path: /validate-diagnosis-netease-com-v1-recoverer
  failurePolicy: Fail
  name: vrecoverer.kb.io
  rules:
  - apiGroups:
    - diagnosis.netease.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - recoverers
